#include "pch.h"
#include "../lab4/Map.h"
#include "../lab4/File.h"
#include "../lab4/Dir.h"
#include "../lab4/FileSystem.h"

TEST(Map, Size) {
	Map<int, int> m;
	m[1] = 1;
	if (m.size() == 1)
		SUCCEED();
	else
		FAIL();
	m[3] = 3;
	m[4] = 4;
	if (m.size() == 3)
		SUCCEED();
	else
		FAIL();
	m.remove(3);
	if (m.size() == 2)
		SUCCEED();
	else
		FAIL();
	m.remove(4);
	m.remove(1);
	if (m.size() == 0)
		SUCCEED();
	else
		FAIL();
}

TEST(Map, Empty) {
	Map<int, int> m;
	if (m.is_empty())
		SUCCEED();
	else
		FAIL();
	m[1] = 1;
	if (!m.is_empty())
		SUCCEED();
	else
		FAIL();
	m.remove(1);
	if (m.is_empty())
		SUCCEED();
	else
		FAIL();
}

TEST(Map, IndexingOperator) {
	Map<int, int> m;
	m[1] = 1;
	m[2] = 34;
	auto it = m.find(1);
	auto it2 = m.find(2);
	if (it != m.end())
		SUCCEED();
	else
		FAIL();
	if (it2 != m.end())
		SUCCEED();
	else
		FAIL();
	ASSERT_EQ(m[1], 1);
	ASSERT_EQ(m[2], 34);
}

TEST(Map, Find) {
	Map<int, int> m;
	m[1] = 1;
	m[56] = 2;
	m[5] = 3;
	Map<int, int>::Iterator it1 = m.find(1);
	Map<int, int>::Iterator it2 = m.find(56);
	Map<int, int>::Iterator it3 = m.find(5);
	Map<int, int>::Iterator it4 = m.find(2);
	if (it1 != m.end() && it2 != m.end() && it3 != m.end() && it4 == m.end())
		SUCCEED();
	else
		FAIL();
	Map<int, int>::ConstIterator it5 = m.find(1);
	Map<int, int>::ConstIterator it6 = m.find(56);
	Map<int, int>::ConstIterator it7 = m.find(5);
	Map<int, int>::ConstIterator it8 = m.find(3);
	if (it1 != m.cend() && it2 != m.cend() && it3 != m.cend() && it4 == m.cend())
		SUCCEED();
	else
		FAIL();
}

TEST(Map, Remove) {
	Map<int, int> m;
	m[1] = 1;
	m[56] = 2;
	m[5] = 3;
	int sz = m.size();
	auto it = m.find(1);
	m.remove(it);
	if (sz - 1 == m.size() && m.find(1) == m.end())
		SUCCEED();
	else
		FAIL();
	m.remove(56);
	if (sz - 2 == m.size() && m.find(56) == m.end())
		SUCCEED();
	else
		FAIL();
	EXPECT_ANY_THROW(m.remove(34), std::out_of_range);
	auto it1 = m.find(67);
	EXPECT_ANY_THROW(m.remove(it1), std::out_of_range);
}

TEST(Map, Begin) {
	Map<int, int> m;
	m[5] = 6;
	m[7] = 3;
	m[1] = 4;
	auto it = m.begin();
	if (it == m.find(1))
		SUCCEED();
	else
		FAIL();
	if (m.find(7) != m.begin())
		SUCCEED();
	else
		FAIL();
	if (m.find(5) != m.cbegin())
		SUCCEED();
	else
		FAIL();
	auto it1 = m.cbegin();
	if (it1 == m.find(1))
		SUCCEED();
	else
		FAIL();
}

TEST(Map, End) {
	Map<int, int> m;
	m[5] = 6;
	m[7] = 3;
	m[1] = 4;
	auto it = m.find(7);
	if (++it == m.end())
		SUCCEED();
	else
		FAIL();
	if (m.find(1) != m.end())
		SUCCEED();
	else
		FAIL();
	if (m.find(5) != m.cend())
		SUCCEED();
	else
		FAIL();
	if (++m.find(7) == m.end())
		SUCCEED();
	else
		FAIL();
}

TEST(Files, Create) {
	File f;
	f.create("name", "main", "hello", 6, "user1");
	int* a;
	char* d = f.get_data("main", "user1", a);
	if (strcmp(d, "hello") && *a == 6)
		SUCCEED();
	else
		FAIL();
}
